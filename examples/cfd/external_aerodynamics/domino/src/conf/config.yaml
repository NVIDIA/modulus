# SPDX-FileCopyrightText: Copyright (c) 2023 - 2024 NVIDIA CORPORATION & AFFILIATES.
# SPDX-FileCopyrightText: All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

project: # Project name
  name: AWS_Dataset
  
exp_tag: 1 # Experiment tag
# Main output directory.
output: outputs/${project.name}/${exp_tag}

hydra: # Hydra config
  run:
    dir: ${output}
  output_subdir: hydra  # Default is .hydra which causes files not being uploaded in W&B.

# The directory to search for checkpoints to continue training.
resume_dir: ${output}/models

data_processor: # Data processor configurable parameters
  kind: drivaer_aws # must be either drivesim or drivaer_aws
  output_dir: /lustre/rranade/modulus_dev/data/volume_data/
  input_dir: /lustre/datasets/drivaer_aws/drivaer_data_full/
  num_processors: 12

data: # Input directory for training and validation data
  input_dir: /lustre/rranade/modulus_dev/data/volume_data/
  input_dir_val: /lustre/rranade/modulus_dev/data/volume_data_val/
  bounding_box: # Bounding box dimensions for computational domain
    min: [-3.5, -2.25 , -0.32]
    max: [8.5 , 2.25  , 3.00]
  bounding_box_surface: # Bounding box dimensions for car surface
    min: [-1.1, -1.2 , -0.32]
    max: [4.5 , 1.2  , 1.2]

variables:
  surface:
    solution:
      # The following is for AWS DrivAer dataset.
      pMeanTrim: scalar
      wallShearStressMeanTrim: vector
  volume:
    solution:
      # The following is for AWS DrivAer dataset.
      UMeanTrim: vector
      pMeanTrim: scalar
      nutMeanTrim: scalar

model:
  model_type: combined # train which model? surface, volume, combined
  loss_function: "mse" # mse or rmse
  interp_res: [128, 128, 128] # resolution of latent space 128, 64, 48
  use_sdf_in_basis_func: true # SDF in basis function network
  positional_encoding: false # calculate positional encoding?
  volume_points_sample: 8192 # Number of points to sample in volume per epoch
  surface_points_sample: 8192 # Number of points to sample on surface per epoch
  geom_points_sample: 300_000 # Number of points to sample on STL per epoch
  surface_neighbors: true # Pre-compute surface neighborhood from input data
  num_surface_neighbors: 7 # How many neighbors?
  use_surface_normals: true # Use surface normals and surface areas for surface computation?
  use_surface_area: true # Use only surface normals and not surface area
  integral_loss_scaling_factor: 100 # Scale integral loss by this factor
  normalization: min_max_scaling # or mean_std_scaling
  encode_parameters: false # encode inlet velocity and air density in the model
  surf_loss_scaling: 5.0 # scale surface loss with this factor in combined mode
  vol_loss_scaling: 1.0 # scale volume loss with this factor in combined mode
  geometry_rep: # Hyperparameters for geometry representation network
    geo_conv:
      base_neurons: 32 # 256 or 64
      base_neurons_out: 1
      volume_radii: [0.1, 0.5]
      surface_radii: [0.05] # 0.05
      hops: 1
    geo_processor:
      base_filters: 8
    geo_processor_sdf:
      base_filters: 8
  nn_basis_functions: # Hyperparameters for basis function network
    base_layer: 512
    fourier_features: false
    num_modes: 5
  aggregation_model: # Hyperparameters for aggregation network
    base_layer: 512
  position_encoder: # Hyperparameters for position encoding network
    base_neurons: 512
  geometry_local: # Hyperparameters for local geometry extraction
    volume_neighbors_in_radius: [128, 128] # [64, 128]
    surface_neighbors_in_radius: [128] # [64]
    volume_radii: [0.05, 0.1] # [0.05. 0.1]
    surface_radii: [0.05] # [0.05]
    base_layer: 512
  parameter_model:
    base_layer: 512
    scaling_params: [30.0, 1.226] # [inlet_velocity, air_density]

train: # Training configurable parameters
  epochs: 500
  checkpoint_interval: 1
  dataloader:
    batch_size: 1
    pin_memory: true
  sampler:
    shuffle: true
    drop_last: false
  checkpoint_dir: /lustre/rranade/modulus_dev/modulus_forked/modulus/examples/cfd/external_aerodynamics/domino/outputs/AWS_Dataset/3/models/
  
val: # Validation configurable parameters
  dataloader:
    batch_size: 1
    pin_memory: true
  sampler:
    shuffle: true
    drop_last: false

eval: # Testing configurable parameters
  test_path: /lustre/rranade/benchmarking/drivaer_aws_surface_test_new/
  save_path: /lustre/rranade/domino/mesh_predictions_surf_final1/
  checkpoint_name: DoMINO.0.50.pt
  scaling_param_path: /lustre/rranade/modulus_dev/modulus_forked/modulus/examples/cfd/external_aerodynamics/domino/outputs/AWS_Dataset/
  refine_stl: False # Automatically refine STL during inference
