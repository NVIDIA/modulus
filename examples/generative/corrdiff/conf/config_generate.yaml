# Copyright (c) 2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

hydra:
  job:
    chdir: False


## Main options
res_ckpt_filename: "./checkpoints/diffusion.pt"   
  # Checkpoint filename for the generative model  
reg_ckpt_filename: "./checkpoints/regression.pt"
  # Checkpoint filename for the mean predictor model
image_outdir: "image_outdir"
  # Where to save the output images
seeds: "0-63"
  # Random seeds used for generation
class_idx: null  
  # Class label. Null is random
num_steps: 18
  # Number of sampling steps
sample_res: "full"
  # Sampling resolution
res_edm: true
  # If residual-based edm is used
sampling_method: "stochastic"
  # Sampling method ["stochastic", "deterministic"]
seed_batch_size: 4
  # batch size across the seed dimension

## Data options
train_data_path: "s3://sw_climate_fno/nbrenowitz/2023-01-24-cwb-4years.zarr"  #"./train_data"
patch_size: 448
crop_size_x: 448
crop_size_y: 448
n_history: 0
in_channels: [0, 1, 2, 3, 4, 9, 10, 11, 12, 17, 18, 19]
out_channels: [0, 17, 18, 19]
img_shape_x: 448
img_shape_y: 448
roll: false
add_grid: true
ds_factor: 4
min_path: null
max_path: null
global_means_path: null
global_stds_path: null
gridtype: "sinusoidal"
N_grid_channels: 4
normalization: "v1"
times:
  - 2021-02-02T00:00:00
#  - 2021-02-07T07:00:00
#  - 2021-02-08T16:00:00
#  - 2021-02-09T20:00:00

## Deterministic sampler options
sigma_min: null
  # Lowest noise level
sigma_max: null
  # Highest noise level
rho: 7
  # Time step exponent
solver: "heun"
  # ODE solver [euler, heun]
discretization: "edm"
  # Time step discretization [vp, ve, iddpm, edm]
schedule: "linear"
  # noise schedule sigma(t) [vp, ve, linear]
scaling: null
  # Signal scaling s(t) [vp, none]
S_churn: 0
  # Stochasticity strength
S_min: 0
  # Stochasticity min noise level
S_max: .inf 
  # Stochasticity max noise level
S_noise: 1
  # Stochasticity noise inflation
